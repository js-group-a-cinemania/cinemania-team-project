{"version":3,"file":"index.js","sources":["../src/js/upcoming.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'cACAF4FB30E4ADEDA0CB251474AAA7DA';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst headers = {\n  accept: 'application/json',\n  Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjYWNhZjRmYjMwZTRhZGVkYTBjYjI1MTQ3NGFhYTdkYSIsIm5iZiI6MTczODM1NDIxMy4zNDgsInN1YiI6IjY3OWQyZTI1MTc2ZmRiMjI0NGNiMjkzMSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.ug0aezZ5htnawKCPoADR0i-JxcDzj43sBX4NiKOKbvg`,\n};\n\nasync function getGenres() {\n  try {\n    const response = await axios.get(`${BASE_URL}/genre/movie/list`, {\n      params: { language: 'en-US' },\n      headers,\n    });\n\n    return response.data.genres.reduce((acc, genre) => {\n      acc[genre.id] = genre.name;\n      return acc;\n    }, {});\n  } catch (error) {\n    console.error('Türleri alırken hata oluştu:', error);\n    return {};\n  }\n}\n\nasync function fetchAndUpdateMovie() {\n  try {\n    const genreMap = await getGenres();\n\n    const response = await axios.get(`${BASE_URL}/movie/upcoming`, {\n      params: { language: 'en-US', page: '1' },\n      headers,\n    });\n\n    const movie = response.data.results[0];\n    if (!movie) {\n      console.error('Film verisi bulunamadı.');\n      return;\n    }\n\n    const posterURL = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n    const genres = movie.genre_ids\n      .map(id => genreMap[id] || 'Unknown')\n      .join(', ');\n\n    const updateElement = `\n    <img class=\"UpdateImg\" src=\"${posterURL}\" alt=\"movie poster\"/>\n    <div class=\"UpdateElementDetails\">\n      <h2 class=\"DetailsTitle\">${movie.original_title}</h2>\n      <p class=\"DetailsContent\">Release date <span class=\"SpanDate\">${movie.release_date}</span></p>\n      <p class=\"DetailsContent\">Vote / Votes <span class=\"SpanVotes\"><span class=\"SpanVote\">${movie.vote_average}</span> / <span class=\"SpanVote\">${movie.vote_count}</span></span></p>\n      <p class=\"DetailsContent\">Popularity <span class=\"SpanPopular\">${movie.popularity}</span></p>\n      <p class=\"DetailsContent\">Genre <span class=\"SpanGenre\">${genres}</span></p>\n      <h3 class=\"DetailsAbout\">ABOUT</h3>\n      <p class=\"AboutContent\">${movie.overview}</p>\n      <button type=\"button\" class=\"addToLibraryButton\">Add to my library</button>\n    </div>`;\n\n    const updateDiv = document.querySelector('.movieInfoContent');\n    if (updateDiv) {\n      updateDiv.insertAdjacentHTML('beforeend', updateElement);\n    } else {\n      console.error(\"Belirtilen .movieInfoContent div'i bulunamadı.\");\n    }\n  } catch (error) {\n    console.error('Hata oluştu:', error);\n  }\n}\n\nfetchAndUpdateMovie();\n"],"names":["BASE_URL","headers","getGenres","axios","acc","genre","error","fetchAndUpdateMovie","genreMap","movie","posterURL","genres","id","updateElement","updateDiv"],"mappings":"qMAGA,MAAMA,EAAW,+BACXC,EAAU,CACd,OAAQ,mBACR,cAAe,wPACjB,EAEA,eAAeC,GAAY,CACzB,GAAI,CAMF,OALiB,MAAMC,EAAM,IAAI,GAAGH,CAAQ,oBAAqB,CAC/D,OAAQ,CAAE,SAAU,OAAS,EAC7B,QAAAC,CACN,CAAK,GAEe,KAAK,OAAO,OAAO,CAACG,EAAKC,KACvCD,EAAIC,EAAM,EAAE,EAAIA,EAAM,KACfD,GACN,EAAE,CACN,OAAQE,EAAO,CACd,eAAQ,MAAM,+BAAgCA,CAAK,EAC5C,CAAE,CACb,CACA,CAEA,eAAeC,GAAsB,CACnC,GAAI,CACF,MAAMC,EAAW,MAAMN,EAAW,EAO5BO,GALW,MAAMN,EAAM,IAAI,GAAGH,CAAQ,kBAAmB,CAC7D,OAAQ,CAAE,SAAU,QAAS,KAAM,GAAK,EACxC,QAAAC,CACN,CAAK,GAEsB,KAAK,QAAQ,CAAC,EACrC,GAAI,CAACQ,EAAO,CACV,QAAQ,MAAM,yBAAyB,EACvC,MACN,CAEI,MAAMC,EAAY,kCAAkCD,EAAM,WAAW,GAE/DE,EAASF,EAAM,UAClB,IAAIG,GAAMJ,EAASI,CAAE,GAAK,SAAS,EACnC,KAAK,IAAI,EAENC,EAAgB;AAAA,kCACQH,CAAS;AAAA;AAAA,iCAEVD,EAAM,cAAc;AAAA,sEACiBA,EAAM,YAAY;AAAA,8FACMA,EAAM,YAAY,oCAAoCA,EAAM,UAAU;AAAA,uEAC7FA,EAAM,UAAU;AAAA,gEACvBE,CAAM;AAAA;AAAA,gCAEtCF,EAAM,QAAQ;AAAA;AAAA,YAIpCK,EAAY,SAAS,cAAc,mBAAmB,EACxDA,EACFA,EAAU,mBAAmB,YAAaD,CAAa,EAEvD,QAAQ,MAAM,gDAAgD,CAEjE,OAAQP,EAAO,CACd,QAAQ,MAAM,eAAgBA,CAAK,CACvC,CACA,CAEAC,EAAqB"}